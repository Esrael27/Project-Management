// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model TeamMember {
  id            Int           @id @default(autoincrement()) // Unique identifier for the user
  username      String        @unique // Unique username for the user
  email         String        @unique // Unique email address for the user
  password      String        @db.VarChar(255)// Password for the user (should be hashed for security)
  role          UserRole      @default(MEMBER)// Role of the user (admin or member)
  createdAt     DateTime      @default(now()) // Timestamp for when the user was created
  updatedAt     DateTime      @updatedAt // Timestamp for when the user was last updated
  tasks         Task[]        @relation("AssignedTo")  // Tasks assigned to this user
}

// Define the UserRole enum

// Define the Project model
model Project {
  id            Int             @id @default(autoincrement()) // Unique identifier for the project
  name          String          @db.VarChar(255)// Name of the project
  description   String?         @db.VarChar(255)// Optional description of the project
  startDate     DateTime        @default(now())// Start date of the project
  status        ProjectStatus   @default(PLANNED)// Status of the project
  deadline      DateTime?  
  progress     Int             @default(0)
  updatedAt     DateTime        @updatedAt // Timestamp for when the project was last updated
  tasks         Task[]          // Tasks associated with this project
  issues      Issue[]  
}

// Define the Task model
model Task {
  id            Int             @id @default(autoincrement()) // Unique identifier for the task
  title         String          @db.VarChar(255) // Title of the task
  description   String?         @db.VarChar(255)// Description of the task (optional)
  startDate     DateTime        @default(now())// Start date of the task
  status        TaskStatus      @default(PLANNED) // Status of the task (default: Planned)
  deadline      DateTime?  
  priority      TaskPriority    // Priority of the task
  progress      Int              @default(0)
  createdAt     DateTime        @default(now()) // Date and time when the task was created
  assignedTo    TeamMember?     @relation("AssignedTo", fields: [assignedToId], references: [id]) // User to whom the task is assigned (optional)
  assignedToId  Int?            // Foreign key referencing the assigned user
  project       Project         @relation(fields: [projectId], references: [id]) // Project to which the task belongs
  projectId     Int             // Foreign key referencing the associated project
}

// Define the Issue model
model Issue {
  id            Int             @id @default(autoincrement()) // Unique identifier for the issue
  title         String          @db.VarChar(255) // Title of the issue
  description   String?         @db.VarChar(255) // Description of the issue (optional)
  status        IssueStatus   @default(OPEN) // Status of the issue (default: Planned)
  createdAt     DateTime        @default(now()) // Date and time when the issue was created
  project       Project         @relation(fields: [projectId], references: [id]) // Project to which the issue belongs
  projectId     Int             // Foreign key referencing the associated project

}

// Define the IssueStatus enum
enum IssueStatus {
  OPEN         // Issue is open
  IN_PROGRESS  // Issue is in progress
  RESOLVED     // Issue has been resolved
  CLOSED       // Issue is closed
}

// Define the TaskStatus enum
enum TaskStatus {
  PLANNED 
  IN_PROGRESS // Task is in progress
  COMPLETED   // Task has been completed
  ON_HOLD     // Task is on hold
  CANCELLED   // Task has been cancelled
}

// Define the TaskPriority enum
enum TaskPriority {
  LOW     // Low priority task
  MEDIUM  // Medium priority task
  HIGH    // High priority task
  URGENT  // Urgent priority task
}

enum UserRole {
  ADMIN   // Admin role
  MEMBER  // Member role
}


// Define the ProjectStatus enum
enum ProjectStatus {
  PLANNED        // Project is planned but not started
  IN_PROGRESS    // Project is currently in progress
  COMPLETED      // Project has been completed
  ON_HOLD        // Project is temporarily on hold
  CANCELLED      // Project has been cancelled
}
